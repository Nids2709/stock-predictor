import streamlit as st
import yfinance as yf
import torch
import torch.nn as nn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

st.title("ðŸ“ˆ LSTM Stock Price Predictor")

# User input
ticker = st.text_input("Enter stock ticker (e.g., AAPL, TSLA):", "AAPL")
n_days = st.slider("Days to use for prediction", 10, 60, 20)

if st.button("Predict"):
    # Load stock data
    df = yf.download(ticker, period="1y")
    data = df[["Open", "High", "Low", "Close", "Volume"]].dropna()

    # Normalize
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(data)

    # Prepare sequences
    X, y = [], []
    for i in range(n_days, len(data_scaled)):
        X.append(data_scaled[i - n_days:i])
        y.append(data_scaled[i, 3])  # Close price

    X, y = np.array(X), np.array(y)
    X_tensor = torch.tensor(X, dtype=torch.float32)
    y_tensor = torch.tensor(y, dtype=torch.float32).view(-1, 1)

    # Define LSTM model
    class LSTM(nn.Module):
        def __init__(self):
            super().__init__()
            self.lstm = nn.LSTM(input_size=5, hidden_size=50, batch_first=True)
            self.fc = nn.Linear(50, 1)

        def forward(self, x):
            out, _ = self.lstm(x)
            return self.fc(out[:, -1])

    model = LSTM()
    loss_fn = nn.MSELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

    # Train model
    for epoch in range(10):  # Keep it short for Streamlit
        model.train()
        optimizer.zero_grad()
        output = model(X_tensor)
        loss = loss_fn(output, y_tensor)
        loss.backward()
        optimizer.step()

    # Predict last n_days to tomorrow
    last_seq = torch.tensor(data_scaled[-n_days:], dtype=torch.float32).unsqueeze(0)
    with torch.no_grad():
        pred = model(last_seq).item()
    pred_rescaled = scaler.inverse_transform([[0, 0, 0, pred, 0]])[0][3]

    st.subheader("ðŸ“Š Predicted next-day Close price:")
    st.success(f"${pred_rescaled:.2f}")

    # Plot
    st.line_chart(df["Close"])
